<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleUdp</name>
    </assembly>
    <members>
        <member name="T:SimpleUdp.Common">
            <summary>
            Commonly used static methods for SimpleUdp.
            </summary>
        </member>
        <member name="M:SimpleUdp.Common.ParseIpPort(System.String,System.String@,System.Int32@)">
            <summary>
            Parse an IP:port string to its parts.
            </summary>
            <param name="ipPort">IP:port.</param>
            <param name="ip">IP address.</param>
            <param name="port">Port number.</param>
        </member>
        <member name="T:SimpleUdp.Datagram">
            <summary>
            Datagram received by this endpoint.
            </summary>
        </member>
        <member name="P:SimpleUdp.Datagram.Ip">
            <summary>
            IP address of the remote endpoint.
            </summary>
        </member>
        <member name="P:SimpleUdp.Datagram.Port">
            <summary>
            Port number of the remote endpoint.
            </summary>
        </member>
        <member name="P:SimpleUdp.Datagram.Data">
            <summary>
            Data received from the remote endpoint.
            </summary>
        </member>
        <member name="T:SimpleUdp.EndpointMetadata">
            <summary>
            Remote endpoint metadata.
            </summary>
        </member>
        <member name="P:SimpleUdp.EndpointMetadata.Ip">
            <summary>
            IP address of the remote endpoint.
            </summary>
        </member>
        <member name="P:SimpleUdp.EndpointMetadata.Port">
            <summary>
            Port number of the remote endpoint.
            </summary>
        </member>
        <member name="T:SimpleUdp.SimpleUdpEvents">
            <summary>
            Events.
            </summary>
        </member>
        <member name="F:SimpleUdp.SimpleUdpEvents.Started">
            <summary>
            The endpoint listener has started.
            </summary>
        </member>
        <member name="F:SimpleUdp.SimpleUdpEvents.Stopped">
            <summary>
            The endpoint listener has stopped.
            </summary>
        </member>
        <member name="M:SimpleUdp.SimpleUdpEvents.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:SimpleUdp.UdpEndpoint">
            <summary>
            UDP endpoint, both client and server.
            </summary>
        </member>
        <member name="E:SimpleUdp.UdpEndpoint.EndpointDetected">
            <summary>
            Event to fire when a new endpoint is detected.
            </summary>
        </member>
        <member name="E:SimpleUdp.UdpEndpoint.DatagramReceived">
            <summary>
            Event to fire when a datagram is received.
            </summary>
        </member>
        <member name="P:SimpleUdp.UdpEndpoint.Endpoints">
            <summary>
            Retrieve a list of (up to) the 100 most recently seen endpoints.
            </summary>
        </member>
        <member name="P:SimpleUdp.UdpEndpoint.MaxDatagramSize">
            <summary>
            Maximum datagram size, must be greater than zero and less than or equal to 65507.
            </summary>
        </member>
        <member name="P:SimpleUdp.UdpEndpoint.Events">
            <summary>
            Events.
            </summary>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.#ctor(System.String,System.Int32)">
            <summary>
            Instantiate the UDP endpoint.
            If you wish to also receive datagrams, set the 'DatagramReceived' event and call 'Start()'.
            </summary>
            <param name="hostname">Local hostname.</param>
            <param name="port">Local port number.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.#ctor(System.Int32)">
            <summary>
            Instantiate the UDP endpoint.
            If you wish to also receive datagrams, set the 'DatagramReceived' event and call 'Start()'.
            </summary>
            <param name="port">Local port number.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.#ctor(System.Net.Sockets.UdpClient)">
            <summary>
            Instantiate the UDP endpoint.
            If you wish to also receive datagrams, set the 'DatagramReceived' event and call 'Start()'.
            </summary>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">Disposing.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.Start">
            <summary>
            Start the UDP listener to receive datagrams.  Before calling this method, set the 'DatagramReceived' event.
            </summary>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.Stop">
            <summary>
            Stop the UDP listener.
            </summary>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.Send(System.String,System.Int32,System.String,System.Int16)">
            <summary>
            Send a datagram to the specific IP address and UDP port.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ip">IP address.</param>
            <param name="port">Port.</param>
            <param name="text">Text to send.</param>
            <param name="ttl">Time to live, the maximum number of routers the packet is allowed to traverse.  Minimum is 0, default is 64.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.Send(System.String,System.Int32,System.Byte[],System.Int16)">
            <summary>
            Send a datagram to the specific IP address and UDP port.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ip">IP address.</param>
            <param name="port">Port.</param>
            <param name="data">Bytes.</param>
            <param name="ttl">Time to live, the maximum number of routers the packet is allowed to traverse.  Minimum is 0, default is 64.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.SendOffset(System.String,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int16)">
            <summary>
            Send a datagram to the specific IP address and UDP port with specific offset and size.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ip">IP address.</param>
            <param name="port">Port.</param>
            <param name="data">Bytes.</param>
            <param name="ttl">Time to live, the maximum number of routers the packet is allowed to traverse.  Minimum is 0, default is 64.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.SendAsync(System.String,System.Int32,System.String,System.Int16)">
            <summary>
            Send a datagram asynchronously to the specific IP address and UDP port.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ip">IP address.</param>
            <param name="port">Port.</param>
            <param name="text">Text to send.</param>
            <param name="ttl">Time to live, the maximum number of routers the packet is allowed to traverse.  Minimum is 0, default is 64.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.SendAsync(System.String,System.Int32,System.Byte[],System.Int16)">
            <summary>
            Send a datagram asynchronously to the specific IP address and UDP port.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ip">IP address.</param>
            <param name="port">Port.</param>
            <param name="data">Bytes.</param> 
            <param name="ttl">Time to live, the maximum number of routers the packet is allowed to traverse.  Minimum is 0, default is 64.</param>
        </member>
        <member name="M:SimpleUdp.UdpEndpoint.SendOffsetAsync(System.String,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int16)">
            <summary>
            Send a datagram asynchronously to the specific IP address and UDP port with specific offset and size.
            This will throw a SocketException if the report UDP port is unreachable.
            </summary>
            <param name="ip">IP address.</param>
            <param name="port">Port.</param>
            <param name="data">Bytes.</param> 
            <param name="ttl">Time to live, the maximum number of routers the packet is allowed to traverse.  Minimum is 0, default is 64.</param>
        </member>
    </members>
</doc>
